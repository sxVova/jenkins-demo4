#!groovy
// Run docker build

properties([disableConcurrentBuilds()])

pipeline {
    agent {
        label 'master'
        }
    options {
        timestamps()
    }
    stages {
    stage("git_clone") {
            steps {
                echo " ============== git clone repo =================="
                git branch: 'master',
                url: 'https://gitlab.sxvova.opensource-ukraine.org/root/microservices-demo.git'
                export EMAIL=vova
                envsubst '${EMAIL}' <cert.yaml > sample.yaml
                cat sample.yaml
            }
        }
	stage("linter_tests") {
            steps {
                echo " ============== start testing linters =================="
                
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                        sh "java -jar /checkstyle-8.30-all.jar -c /sun_checks.xml ./src/adservice/*"
                  }
                sh """

                         java -jar /checkstyle-8.30-all.jar -c /google_checks.xml ./src/adservice/*
                         export GOROOT=/usr/local/go
                         export GOPATH=/var/lib/jenkins/workspace/demo4/go
                         export PATH=/usr/local/go/bin:/var/lib/jenkins/workspace/demo4/go/bin:$PATH
                         go get -u golang.org/x/lint/golint

                         golint ./src/frontend/
                         golint ./src/productcatalogservice/
                         golint ./src/checkoutservice/
                         """
                  catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                        sh "python -m flake8 --statistics --count src/"
                  }

                  catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                        sh 'eslint  --no-eslintrc "src/paymentservice/**.js"'
                  }
                  catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                        sh 'eslint  --no-eslintrc "src/currencyservice/**.js"'
                  }
              echo " ============== end testing linters =================="
            }
        }
	stage("create_docker_images") {
            steps {
                echo " ============== start building image =================="
                        sh '''
                          GIT_COMMIT_MICRO=$(git log -n 1 --pretty=format:"%H" | cut -c -8 )

                          echo "y" | gcloud auth configure-docker
                          gcloud auth activate-service-account --key-file /key.json

                          docker build -t gcr.io/devops-259416/adservice:"${GIT_COMMIT_MICRO}"  -f ./src/adservice/Dockerfile ./src/adservice/
                          docker push gcr.io/devops-259416/adservice:"${GIT_COMMIT_MICRO}"

                          docker build -t gcr.io/devops-259416/cartservice:"${GIT_COMMIT_MICRO}"  -f ./src/cartservice/Dockerfile ./src/cartservice/
                          docker push gcr.io/devops-259416/cartservice:"${GIT_COMMIT_MICRO}"

                          docker build -t gcr.io/devops-259416/checkoutservice:"${GIT_COMMIT_MICRO}"  -f ./src/checkoutservice/Dockerfile ./src/checkoutservice/
                          docker push gcr.io/devops-259416/checkoutservice:"${GIT_COMMIT_MICRO}"

                          docker build -t gcr.io/devops-259416/currencyservice:"${GIT_COMMIT_MICRO}"  -f ./src/currencyservice/Dockerfile ./src/currencyservice/
                          docker push gcr.io/devops-259416/currencyservice:"${GIT_COMMIT_MICRO}"

                        #  docker build -t gcr.io/devops-259416/emailservice:"${GIT_COMMIT_MICRO}"  -f ./src/emailservice/Dockerfile ./src/emailservice/
                        #  docker push gcr.io/devops-259416/emailservice:"${GIT_COMMIT_MICRO}"

                        #  docker build -t gcr.io/devops-259416/frontend:"${GIT_COMMIT_MICRO}"  -f ./src/frontend/Dockerfile ./src/frontend/
                        #  docker push gcr.io/devops-259416/frontend:"${GIT_COMMIT_MICRO}"

                        #  docker build -t gcr.io/devops-259416/loadgenerator:"${GIT_COMMIT_MICRO}"  -f ./src/loadgenerator/Dockerfile ./src/loadgenerator/
                        #  docker push gcr.io/devops-259416/loadgenerator:"${GIT_COMMIT_MICRO}"

                        #  docker build -t gcr.io/devops-259416/paymentservice:"${GIT_COMMIT_MICRO}"  -f ./src/paymentservice/Dockerfile ./src/paymentservice/
                        #  docker push gcr.io/devops-259416/paymentservice:"${GIT_COMMIT_MICRO}"

                        #  docker build -t gcr.io/devops-259416/productcatalogservice:"${GIT_COMMIT_MICRO}"  -f ./src/productcatalogservice/Dockerfile ./src/productcatalogservice/
                        #  docker push gcr.io/devops-259416/productcatalogservice:"${GIT_COMMIT_MICRO}"

                        #  docker build -t gcr.io/devops-259416/recommendationservice:"${GIT_COMMIT_MICRO}"  -f ./src/recommendationservice/Dockerfile ./src/recommendationservice/
                        #  docker push gcr.io/devops-259416/recommendationservice:"${GIT_COMMIT_MICRO}"

                        #  docker build -t gcr.io/devops-259416/shippingservice:"${GIT_COMMIT_MICRO}"  -f ./src/shippingservice/Dockerfile ./src/shippingservice/
                        #  docker push gcr.io/devops-259416/shippingservice:"${GIT_COMMIT_MICRO}"
                          '''
            }
        }

        stage("deploy_to_k8s") {
            steps {
                echo " ============== Make k8s deploy =================="
                        sh '''
                          bash ./tag-changer.sh $(git log -n 1 --pretty=format:"%H" | cut -c -8 )

                          gcloud config set project devops-259416
                          export CLOUDSDK_CONTAINER_USE_CLIENT_CERTIFICATE=False
                          gcloud container clusters get-credentials demo --zone us-central1-a
                        '''
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                            sh 'kubectl create namespace cert-manager'
                        }
                        
                        sh 'kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.14.0/cert-manager-legacy.yaml'
                        
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                            sh 'kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user=$(gcloud config get-value core/account)'
                        }
                        
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                            sh 'kubectl create secret generic k8s-service-account --from-file=/key.json -n cert-manager'
                        }
                          sh '''
                          kubectl wait --timeout=200s po --all --for=condition=Ready -n cert-manager
                          kubectl apply -f ./cert.yaml

                          kubectl apply -f ./release/kubernetes-manifests.yaml
                          kubectl get po,svc,ing -o wide
                          kubectl get po -o wide -n cert-manager
                        '''
            }
        }
    }
}
